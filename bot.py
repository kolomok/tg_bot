from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openpyxl import Workbook, load_workbook
import os
from dotenv import load_dotenv
import logging

# ‚úÖ –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# üìÅ –ü–∞–ø–∫–∞ –¥–ª—è Excel
USER_DATA_DIR = "user_excels"
os.makedirs(USER_DATA_DIR, exist_ok=True)

def get_excel_path(user_id: int) -> str:
    filename = f"{user_id}.xlsx"
    return os.path.join(USER_DATA_DIR, filename)

def init_excel(file_path: str):
    if not os.path.exists(file_path):
        wb = Workbook()
        ws = wb.active
        ws.append(["–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞/—à—Ç—É–∫–∞", "–¶–µ–Ω–∞/–æ–±—â–∞—è"])
        wb.save(file_path)

# üì§ –≠–∫—Å–ø–æ—Ä—Ç
async def export_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    file_path = get_excel_path(user_id)
    if os.path.exists(file_path):
        with open(file_path, "rb") as f:
            await update.message.reply_document(document=InputFile(f, filename=os.path.basename(file_path)))
    else:
        await update.message.reply_text("–§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")

# üü¢ /start
reply_keyboard = [["–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"]]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –æ—Ç {update.effective_user.id}")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è Excel-–∑–∞–ø–∏—Å–µ–π.", reply_markup=markup)

# ‚ûï –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
async def prompt_for_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ: `–¢–æ–≤–∞—Ä, –ö–æ–ª-–≤–æ, –¶–µ–Ω–∞/—à—Ç, –û–±—â–∞—è`", parse_mode="Markdown")
    context.user_data["awaiting_data"] = True

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_data"):
        user_id = update.message.from_user.id
        file_path = get_excel_path(user_id)
        init_excel(file_path)
        try:
            parts = [p.strip() for p in update.message.text.split(",")]
            if len(parts) != 4:
                raise ValueError("–ù—É–∂–Ω–æ 4 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            wb = load_workbook(file_path)
            ws = wb.active
            ws.append(parts)
            wb.save(file_path)
            await update.message.reply_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            context.user_data["awaiting_data"] = False
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.")

# üöÄ –ó–∞–ø—É—Å–∫
load_dotenv()
TOKEN = os.environ.get("BOT_TOKEN")
RENDER_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
PORT = int(os.environ.get("PORT", 8443))

if not TOKEN or not RENDER_HOSTNAME:
    raise ValueError("BOT_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("export", export_file))
app.add_handler(MessageHandler(filters.Text(["–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]), prompt_for_data))
app.add_handler(MessageHandler(filters.Text(["üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"]), export_file))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

logging.info(f"üåê –°—Ç–∞—Ä—Ç –±–æ—Ç–∞: https://{RENDER_HOSTNAME}/webhook, –ø–æ—Ä—Ç {PORT}")

app.run_webhook(
    listen="0.0.0.0",
    port=PORT,
    webhook_url=f"https://{RENDER_HOSTNAME}/webhook"
)