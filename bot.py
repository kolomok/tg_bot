import os
import logging
import asyncio
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# üì© –û—Ç–≤–µ—Ç –Ω–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"üì® –ü—Ä–∏—à—ë–ª –∞–ø–¥–µ–π—Ç –æ—Ç {update.effective_user.id}")
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∂–∏–≤–æ–π! Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    load_dotenv()

    TOKEN = os.environ.get("BOT_TOKEN")
    HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    PORT = int(os.environ.get("PORT", 8443))

    if not TOKEN or not HOSTNAME:
        raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    WEBHOOK_URL = f"https://{HOSTNAME}/webhook"
    logging.info(f"üåê Webhook URL –±—É–¥–µ—Ç: {WEBHOOK_URL}")

    # üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ Telegram
    set_url = f"https://api.telegram.org/bot{TOKEN}/setWebhook?url={WEBHOOK_URL}"
    r = requests.get(set_url)
    if not r.ok:
        raise RuntimeError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: {r.text}")
    logging.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # ‚öôÔ∏è –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    asyncio.run(main())