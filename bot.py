from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openpyxl import Workbook, load_workbook
import os
from dotenv import load_dotenv

# üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_DIR = "user_excels"
os.makedirs(USER_DATA_DIR, exist_ok=True)

# üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

# üìÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ Excel-—Ñ–∞–π–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_excel_path(user_id: int) -> str:
     desktop = os.path.join(os.path.expanduser("~"), "Desktop")
     os.makedirs(desktop, exist_ok=True)
     filename = f"{user_id}.xlsx"
     return os.path.join(desktop, filename)

# üìÑ –°–æ–∑–¥–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
def init_excel(file_path: str):
    if not os.path.exists(file_path):
        wb = Workbook()
        ws = wb.active
        ws.append(["–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞/—à—Ç—É–∫–∞", "–¶–µ–Ω–∞/–æ–±—â–∞—è"])
        wb.save(file_path)

async def export_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    file_path = get_excel_path(user_id)

    if os.path.exists(file_path):
        with open(file_path, "rb") as f:
            await update.message.reply_document(document=InputFile(f, filename=os.path.basename(file_path)))
    else:
        await update.message.reply_text("–§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

# üìã –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_keyboard = [["–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"]]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
# üîò –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=markup
    )

# ‚ûï –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
async def prompt_for_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–¢–æ–≤–∞—Ä, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¶–µ–Ω–∞/—à—Ç—É–∫–∞, –¶–µ–Ω–∞/–æ–±—â–∞—è`",
        parse_mode="Markdown"
    )
    context.user_data["awaiting_data"] = True

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_data"):
        user_id = update.message.from_user.id
        file_path = get_excel_path(user_id)
        init_excel(file_path)

        try:
            parts = [p.strip() for p in update.message.text.split(",")]
            if len(parts) != 4:
                raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è 4 –∑–Ω–∞—á–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")

            wb = load_workbook(file_path)
            ws = wb.active
            ws.append(parts)
            wb.save(file_path)

            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            context.user_data["awaiting_data"] = False
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    load_dotenv()

    TOKEN = os.environ.get("BOT_TOKEN")
    RENDER_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    PORT = int(os.environ.get("PORT", 8443))

    if not TOKEN or not RENDER_HOSTNAME:
        raise ValueError("BOT_TOKEN –∏–ª–∏ RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_file))
    app.add_handler(MessageHandler(filters.Text(["–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"]), prompt_for_data))
    app.add_handler(MessageHandler(filters.Text(["üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"]), export_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_webhook(listen="0.0.0.0",
        port=PORT,
        webhook_url=f"https://{RENDER_HOSTNAME}/webhook"
    )

